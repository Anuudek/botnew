"‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±( ‚í∏ùêÅùê•ùê®ùê®ùê¶ùêÅùê®ùê≠ (ùê¶ùêÆùê•ùê≠ùê¢-ùêùùêûùêØùê¢ùêúùêû) ùêõùê≤ ùêåùêöùê†ùêßùêûùêÆùê¶‚Ñ¢ )‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé";
//  ‚ïî‚ßâ‡ºª ‚í∏ùêÅùê•ùê®ùê®ùê¶ùêÅùê®ùê≠ (ùê¶ùêÆùê•ùê≠ùê¢-ùêùùêûùêØùê¢ùêúùêû) ùêõùê≤ ùêåùêöùê†ùêßùêûùêÆùê¶‚Ñ¢
//  ‚ïë>>  is a whatsapp user-bot with automation, moderation, music, games and more of 200+ commands!
//  ‚ïë
//  ‚ïë
//  ‚ïë‚¶Å> üåü A versatile whatsApp multi-purpose bot designed for group management and user convenience.
//  ‚ïë‚¶Å> üöÄ Simplifies group management tasks and enhances the overall user experience.
//  ‚ïë‚¶Å> ‚ö†Ô∏è Please note: Engaging in spamming activities may lead to account suspension. Use responsibly!
//  ‚ïë‚¶Å> üéâ BloomBot is intended for fun and convenience, but we're not responsible for account bans.
//  ‚ïë‚¶Å> üîÄ forking the repository is allowed, but customized versions or modified plugins are unsupported.
//  ‚ïë‚¶Å> ‚ö†Ô∏è Exercise caution and take responsibility for any modifications made to the bot.
//  ‚ïë‚¶Å> üìû Need assistance or have issues? Contact our developers.
//  ‚ïë‚¶Å> üîÑ We'll continue providing updates and support for the original version of the bot.
//  ‚ïë‚¶Å> üëâ Enjoy the features and functionality of BloomBot responsibly! Make the most out of your
//  ‚ïë    whatsApp group management experience! üéâ
//  ‚ïë
//  ‚ïë     üö®ùêîùê¨ùêöùê†ùêû ùêçùê®ùê≠ùê¢ùêúùêûüö®
//  ‚ïë‚¶Å>    ‚í∏BloomBot is in no way affiliated with, authorized, maintained,
//  ‚ïë‚¶Å>    sponsored or endorsed by whatsApp or any of its affiliates or
//  ‚ïë‚¶Å>    subsidiaries. This is an independent and unofficial software.
//  ‚ïë‚¶Å>    Use at your own risk.
//  ‚ïë
//  ‚ïö‚óé ‚öôÔ∏èDevelopers: +918436686758, +918250889325
"‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±( ‚í∏ùêÅùê•ùê®ùê®ùê¶ùêÅùê®ùê≠ (ùê¶ùêÆùê•ùê≠ùê¢-ùêùùêûùêØùê¢ùêúùêû) ùêõùê≤ ùêåùêöùê†ùêßùêûùêÆùê¶‚Ñ¢ )‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé";
require("@/config/index.js");
const { Boom } = require("@hapi/boom");
const { exec } = require("child_process");
const dbdata = require("@/config/dbdata.js");
const purgepg = require("@/client/purgepg.js");
const { DisconnectReason } = require("@whiskeysockets/baileys");

module.exports = async (BloomBot, magneum, logger) => {
  const dbrem = async () => {
    if (dbdata.DATABASE_URL.includes("postgres")) {
      try {
        await purgepg();
      } catch (error) {
        logger.error("‚ùå Ocorreu um erro ao limpar o banco de dados: ", error);
      }
      process.exit(0);
    } else {
      exec("rm -rf ./server/database/sql/auth.db");
      process.exit(0);
    }
  };

  BloomBot.ev.on("connection.update", async (update) => {
    const {
      qr,
      connection,
      isNewLogin,
      lastDisconnect,
//      receivedPendingNotifications,
    } = update;

    switch (connection) {
      case "connecting":
        logger.info("üì¢ Conectando ao WhatsApp.");
        break;
      case "open":
        logger.info("üì¢ Login bem-sucedido! Conex√£o com WhatsApp estabelecida.");
        break;
      case "close":
        let reason = new Boom(lastDisconnect?.error)?.output.statusCode;
        logger.info(reason);
        switch (reason) {
          case DisconnectReason.badSession:
            logger.error("‚ùå Arquivo de sess√£o inv√°lido detectado.");
            await dbrem();
            await magneum();
            break;
          case DisconnectReason.connectionClosed:
            logger.error(
              "‚ùå A conex√£o foi fechada inesperadamente. Reconectando ao WhatsApp."
            );
            await magneum();
            break;
          case DisconnectReason.connectionLost:
            logger.error(
              "‚ùå Conex√£o perdida do servidor. Reconectando ao WhatsApp."
            );
            await magneum();
            break;
          case DisconnectReason.connectionReplaced:
            logger.error(
              "‚ùå Conex√£o substitu√≠da. Foi aberta outra nova sess√£o. Feche a sess√£o atual antes de estabelecer uma nova conex√£o."
            );
            break;
          case DisconnectReason.loggedOut:
            logger.error(
              "‚ùå Dispositivo desconectado. Digitalize novamente e execute o programa para estabelecer uma nova sess√£o."
            );
            await dbrem();
            await magneum();
            break;
          case DisconnectReason.restartRequired:
            logger.debug("üêû √â necess√°rio reiniciar. Reiniciando o programa.");
            await magneum();
            break;
          case DisconnectReason.timedOut:
            logger.error("‚ùå A conex√£o expirou. Reconectando ao WhatsApp.");
            await magneum();
            break;
          default:
            logger.error("‚ùå Motivo de desconex√£o desconhecido: " + reason, connection);
            await dbrem();
            await magneum();
            break;
        }
        break;
      case true:
        logger.debug("üì¢ O usu√°rio est√° on-line. A conex√£o do WhatsApp est√° ativa.");
        break;
      case false:
        logger.error("üì¢ O usu√°rio est√° off-line. A conex√£o do WhatsApp est√° inativa.");
        break;
      default:
/*        if (receivedPendingNotifications === true) {
          logger.debug("üì¢ Notifica√ß√µes pendentes recebidas. Em processamento.");
        } else if (receivedPendingNotifications === false) {
          logger.error("üì¢ Nenhuma notifica√ß√£o pendente recebida.");
        } else */if (isNewLogin === true) {
          logger.debug(
            "üì¢ Novo login detectado. O usu√°rio efetuou login com sucesso."
          );
        } else if (isNewLogin === false) {
          logger.error("üì¢ O usu√°rio n√£o est√° realizando um novo login.");
        } else if (qr) {
          logger.info(
            "C√≥digo QR recebido. Por favor, leia o seguinte c√≥digo QR para fazer login:"
          );
          console.log(qr);
        } else {
          logger.info("üì¢ Evento de conex√£o recebido:", update);
        }
        break;
    }
  });

  return BloomBot;
};
